package DbmsAPP;


/**
* DbmsAPP/_DbmsImplBase.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from dbms.idl
* Thursday, December 15, 2016 11:40:21 PM EET
*/

public abstract class _DbmsImplBase extends org.omg.CORBA.portable.ObjectImpl
                implements DbmsAPP.Dbms, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors
  public _DbmsImplBase ()
  {
  }

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("hello", new java.lang.Integer (0));
    _methods.put ("show_dbs", new java.lang.Integer (1));
    _methods.put ("show_tables", new java.lang.Integer (2));
    _methods.put ("drop_database", new java.lang.Integer (3));
    _methods.put ("drop_table", new java.lang.Integer (4));
    _methods.put ("create_database", new java.lang.Integer (5));
    _methods.put ("create_table", new java.lang.Integer (6));
    _methods.put ("register", new java.lang.Integer (7));
    _methods.put ("login", new java.lang.Integer (8));
    _methods.put ("find", new java.lang.Integer (9));
    _methods.put ("is_unique_name", new java.lang.Integer (10));
    _methods.put ("get_metadata", new java.lang.Integer (11));
    _methods.put ("limit", new java.lang.Integer (12));
    _methods.put ("skip", new java.lang.Integer (13));
    _methods.put ("sort", new java.lang.Integer (14));
    _methods.put ("count", new java.lang.Integer (15));
    _methods.put ("insert", new java.lang.Integer (16));
    _methods.put ("update", new java.lang.Integer (17));
    _methods.put ("remove", new java.lang.Integer (18));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // DbmsAPP/Dbms/hello
       {
         String $result = null;
         $result = this.hello ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // DbmsAPP/Dbms/show_dbs
       {
         String $result = null;
         $result = this.show_dbs ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // DbmsAPP/Dbms/show_tables
       {
         String DBname = in.read_string ();
         String $result = null;
         $result = this.show_tables (DBname);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // DbmsAPP/Dbms/drop_database
       {
         String DBname = in.read_string ();
         this.drop_database (DBname);
         out = $rh.createReply();
         break;
       }

       case 4:  // DbmsAPP/Dbms/drop_table
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         this.drop_table (DBname, Tname);
         out = $rh.createReply();
         break;
       }

       case 5:  // DbmsAPP/Dbms/create_database
       {
         String DBname = in.read_string ();
         this.create_database (DBname);
         out = $rh.createReply();
         break;
       }

       case 6:  // DbmsAPP/Dbms/create_table
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         String keyType = in.read_string ();
         this.create_table (DBname, Tname, keyType);
         out = $rh.createReply();
         break;
       }

       case 7:  // DbmsAPP/Dbms/register
       {
         String user = in.read_string ();
         String password = in.read_string ();
         boolean $result = false;
         $result = this.register (user, password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // DbmsAPP/Dbms/login
       {
         String user = in.read_string ();
         String password = in.read_string ();
         boolean $result = false;
         $result = this.login (user, password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 9:  // DbmsAPP/Dbms/find
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         String $result = null;
         $result = this.find (DBname, Tname);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 10:  // DbmsAPP/Dbms/is_unique_name
       {
         String DBname = in.read_string ();
         boolean $result = false;
         $result = this.is_unique_name (DBname);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 11:  // DbmsAPP/Dbms/get_metadata
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         String $result = null;
         $result = this.get_metadata (DBname, Tname);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 12:  // DbmsAPP/Dbms/limit
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         int num = in.read_long ();
         String $result = null;
         $result = this.limit (DBname, Tname, num);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 13:  // DbmsAPP/Dbms/skip
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         int num = in.read_long ();
         String $result = null;
         $result = this.skip (DBname, Tname, num);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 14:  // DbmsAPP/Dbms/sort
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         int num = in.read_long ();
         String $result = null;
         $result = this.sort (DBname, Tname, num);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 15:  // DbmsAPP/Dbms/count
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         int $result = (int)0;
         $result = this.count (DBname, Tname);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 16:  // DbmsAPP/Dbms/insert
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         String keyValue = in.read_string ();
         this.insert (DBname, Tname, keyValue);
         out = $rh.createReply();
         break;
       }

       case 17:  // DbmsAPP/Dbms/update
       {
         String id = in.read_string ();
         String keyVal = in.read_string ();
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         this.update (id, keyVal, DBname, Tname);
         out = $rh.createReply();
         break;
       }

       case 18:  // DbmsAPP/Dbms/remove
       {
         String DBname = in.read_string ();
         String Tname = in.read_string ();
         String id = in.read_string ();
         this.remove (DBname, Tname, id);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:DbmsAPP/Dbms:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }


} // class _DbmsImplBase
